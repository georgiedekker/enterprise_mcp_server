# .env.example - Environment variables for the MCP API Gateway and Services Ecosystem
# Copy this file to .env and fill in your specific values.
# Do NOT commit your .env file to version control.

# === General Application Settings ===
# Recommended for Python in Docker to ensure logs appear immediately
PYTHONUNBUFFERED=1
# Logging level (e.g., DEBUG, INFO, WARNING, ERROR) for all services
LOG_LEVEL=DEBUG

# === API Gateway Settings ===
# Host for the API Gateway service to bind to
API_GATEWAY_HOST=0.0.0.0
# Port for the API Gateway service
GATEWAY_PORT=8000

# === Enterprise MCP Server Settings ===
# Host for the Enterprise MCP Server to bind to.
# Note: The Python code in src/server.py might use os.getenv("HOST") for this value.
HOST=0.0.0.0
# Port for the Enterprise MCP Server.
# Note: The Python code in src/server.py might use os.getenv("PORT") for this value.
PORT=8033

# Full URL the API Gateway uses to connect to the Enterprise MCP Server backend.
# If running services with Docker Compose, this might be a service name, e.g., http://enterprise-mcp-server:8033
# If running locally without Docker, it would be http://<HOST>:<PORT>
ENTERPRISE_MCP_SERVER_URL=http://localhost:8033

# Display name for the Enterprise MCP Server instance (used in logs, etc.)
MCP_SERVER_NAME="Enterprise MCP Server"

# === CORS Settings ===
# Comma-separated list of allowed origins for Cross-Origin Resource Sharing.
# This configuration is typically used by both the API Gateway and the Enterprise MCP Server.
CORS_ALLOWED_ORIGINS=https://app.cursor.sh,https://cursor.sh,http://localhost:*,http://127.0.0.1:*
CORS_ORIGINS=http://localhost:*,https://app.cursor.sh,https://cursor.sh

# === Security Settings ===
# Set to "true" to disable the RestrictedPython sandbox for tool execution. USE WITH EXTREME CAUTION!
# This applies to the environment where tools are actually run (Tool Server, mounted into Enterprise MCP Server).
SKIP_SANDBOX=False

# Client Credentials for MCP Client Authentication (used by Enterprise MCP Server's /token endpoint)
# These are the credentials an MCP client (e.g., Cursor) will use.
MCP_CLIENT_ID="your_mcp_client_id_here"
MCP_CLIENT_SECRET="your_mcp_client_secret_here"

# JWT Settings for token generation by the Enterprise MCP Server
JWT_SECRET_KEY=your_secret_key_at_least_32_chars_long
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=120

# Admin User (for initial setup)
ADMIN_USERNAME=admin
ADMIN_PASSWORD=secure_admin_password

# Default Admin User Credentials (used by init_db.sh for initial admin user setup in PostgreSQL)
# This is a bcrypt hash for the admin password
DEFAULT_ADMIN_PASSWORD_HASH='$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW'

# === PostgreSQL Database Settings ===
# Used by the Enterprise MCP Server for storing tool definitions, user accounts, roles, permissions, and audit logs.
POSTGRES_HOST=localhost
POSTGRES_PORT=5434
POSTGRES_DB=enterprise_mcp_server
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_POOL_MIN_SIZE=2
POSTGRES_POOL_MAX_SIZE=10

# === Redis Settings ===
# Used by the API Gateway for rate limiting, analytics, and domain mapping cache.
# Can also be used by the Enterprise MCP Server for session management or caching if implemented.
REDIS_URL=redis://localhost:6379

# API Gateway specific Redis settings for caching and analytics
DEFAULT_RATE_LIMIT=1000
REDIS_ANALYTICS_TTL=604800 # TTL for analytics data in Redis, in seconds (e.g., 7 days)
REDIS_DOMAIN_TTL=2592000 # TTL for domain mapping cache in Redis, in seconds (e.g., 30 days)

# === API Gateway Health Check Settings ===
# Configuration for how the API Gateway checks the health of backend services (like the Enterprise MCP Server)
HEALTH_CHECK_INTERVAL=30 # Interval in seconds between health checks
HEALTH_CHECK_TIMEOUT=5.0 # Timeout in seconds for a single health check request